{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@actions/http-client'\nimport * as github from '@actions/github'\nimport { promises as fs } from 'fs'\nimport * as core from '@actions/core'\nimport { basename } from 'path'\nimport * as path from 'path'\nimport * as os from 'os'\nimport * as tar from 'tar'\nexport const AGENT_VERSION = '0.0.11'\n\n/**\n * Downloads a .tar.gz from a given URL and extracts its single file.\n * Saves the extracted file to the specified destination directory.\n *\n * @param url - The .tar.gz URL\n * @param outputDir - Directory where the extracted file should go\n * @returns Promise<string> - Resolves with the extracted file path\n */\nexport async function downloadAndExtract(\n  url: string,\n  outputDir: string = '.'\n): Promise<string> {\n  const client = new HttpClient('kittengrid-action')\n  const response = await client.get(url)\n\n  if (response.message.statusCode !== 200) {\n    // Properly close the response stream to prevent hanging handles\n    response.message.destroy()\n    throw new Error(\n      `Failed to fetch ${url}: ${response.message.statusCode} ${response.message.statusMessage}`\n    )\n  }\n\n  // Extract directly from the response stream\n  return new Promise((resolve, reject) => {\n    let extractedFilePath = ''\n\n    if (!response.message || !response.message.readable) {\n      response.message?.destroy()\n      reject(new Error(`No response body received from ${url}`))\n      return\n    }\n\n    response.message\n      .pipe(\n        tar.x({\n          cwd: outputDir, // where to extract\n          strict: true,\n          onentry: (entry) => {\n            extractedFilePath = `${outputDir}/${basename(entry.path)}`\n          }\n        })\n      )\n      .on('error', (err) => {\n        response.message.destroy()\n        reject(err)\n      })\n      .on('close', () => resolve(extractedFilePath))\n  })\n}\n\n/**\n * Downloads the Kittengrid agent for a specific architecture, OS, and version.\n *\n * @param arch - The architecture (e.g., 'amd64', 'arm64')\n * @param os - The operating system (e.g., 'linux', 'darwin')\n * @param version - The version of the agent to download\n * @param outputDir - Destination path to save the downloaded file\n * @returns Promise<string> - Resolves with the path to the downloaded agent\n **/\nasync function downloadAgentInternal(\n  arch: string,\n  os: string,\n  version: string,\n  outputDir: string\n): Promise<string> {\n  const url = `https://github.com/kittengrid/agent/releases/download/v${version}/kittengrid-agent-${os}-${arch}.tar.gz`\n  return downloadAndExtract(url, outputDir)\n}\n\nexport async function downloadAgent(): Promise<string> {\n  const arch = core.platform.arch === 'x64' ? 'amd64' : core.platform.arch\n  if (arch !== 'amd64' && arch !== 'arm64') {\n    throw new Error(\n      `Unsupported architecture: ${arch}. Only amd64 and arm64 are supported.`\n    )\n  }\n\n  const current_os = core.platform.platform\n  if (current_os !== 'linux') {\n    throw new Error(\n      `Unsupported OS: ${current_os}. Only linux is currently supported.`\n    )\n  }\n\n  const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'download-agent-'))\n\n  return downloadAgentInternal(arch, current_os, AGENT_VERSION, tempDir)\n}\n\nexport async function showContextInfo(): Promise<void> {\n  core.startGroup('Kittengrid Agent Info')\n  core.info(`Action version: ${process.env['GITHUB_ACTIONS']}`)\n  core.info(`Node version: ${process.version}`)\n  core.info(`Agent version: ${AGENT_VERSION}`)\n  core.info(`Architecture: ${core.platform.arch}`)\n  core.info(`Operating System: ${core.platform.platform}`)\n  core.endGroup()\n}\n\nexport async function populateEnv(ctx: typeof github.context): Promise<void> {\n  const event_number = ctx.payload.pull_request?.number\n  if (!event_number) {\n    core.setFailed('This action can only be run on pull_request events.')\n    return\n  }\n\n  core.exportVariable('KITTENGRID_VCS_PROVIDER', 'github')\n  core.exportVariable(\n    'KITTENGRID_PROJECT_VCS_ID',\n    ctx.repo.owner + '/' + ctx.repo.repo\n  )\n  core.exportVariable('KITTENGRID_PULL_REQUEST_VCS_ID', event_number)\n  core.exportVariable('KITTENGRID_BIND_ADDRESS', '0.0.0.0')\n  core.exportVariable('KITTENGRID_API_URL', 'https://app.kittengrid.com')\n  core.exportVariable(\n    'KITTENGRID_WORKFLOW_RUN_ID',\n    process.env['GITHUB_RUN_ID'] || ''\n  )\n  core.exportVariable('KITTENGRID_LAST_COMMIT_SHA', ctx.sha)\n\n  // env vars from action inputs\n  core.exportVariable(\n    'KITTENGRID_LOG_LEVEL',\n    core.getInput('log-level') || 'info'\n  )\n  core.exportVariable(\n    'KITTENGRID_API_KEY',\n    core.getInput('api-key', { required: true })\n  )\n  core.exportVariable(\n    'KITTENGRID_SHOW_SERVICES_OUTPUT',\n    core.getInput('show-services-output') || 'false'\n  )\n}\n"]}